channel c.
free SI: channel.
free ID: channel.
free IA: channel.
free DA: channel[private].

free ST: channel[private].
free IT: channel.
free DT: channel[private].

type id.
type sessionid.
type mkp.
type skp.
type ski.

type secretKey.
type publicKey.

(* IBE *)
fun pk(skp): mkp.

fun encIBE(mkp, id, bitstring) : bitstring.
fun getSki(skp, id): ski.
reduc forall x:bitstring, iid: id, mkey: skp, y: ski;
  decIBE(encIBE(pk(mkey), iid, x), getSki(mkey, iid)) = x.


(* Signatures *)
fun signedPublicKey(secretKey): publicKey.
fun sign(bitstring, secretKey): bitstring.

reduc forall m: bitstring, k: secretKey; checksign(sign(m,k), signedPublicKey(k)) = m.

(*
 *  EVENTS
*)

event endS().
event endICJ().
event endDecAuth().
event endA().
event decryptionStarted(bitstring).
event decryptionReceived(bitstring).
event auditorBullet(bitstring, bitstring).

event BlameA(bitstring, id, bitstring, id).
event BlameB(bitstring, id, bitstring, id).
event BlameC(bitstring, id, bitstring, id).
event NoBlameA(bitstring, id).
event NoBlameB(bitstring, id).
event NoBlameC(bitstring, id).

event KOt(bitstring, id, bitstring, id, bitstring, id).
event OKt(bitstring, id, bitstring, id, bitstring, id).

(*
 *  QUERIES
 *)

query event (endS()).
query event (endICJ()).
query event (endDecAuth()).
query event (endA()).

query data:bitstring, host:id, data':bitstring, host':id, data'':bitstring, host'':id;
  event (BlameA(data', host', data, host));
  event (BlameB(data, host, data', host'));
  event (BlameC(data, host, data'', host'')).
  (*event (KOt(data, host, data, host, data, host));
  event (OKt(data, host, data, host, data, host)).*)

(*
query a:bitstring;
  event (decryptionReceived(a)) ==> event (decryptionStarted(a)).
*)

(* data Source *)
let pS(mpk:mkp, sessionkey:sessionid, data:bitstring, host:id, pSKey:secretKey) =
  let pkey = signedPublicKey(pSKey) in
  out(c, pkey);
  let ct = encIBE(mpk, host, data) in
  out(ST, (ct, host, sessionkey));
  out(SI, sign((ct, host, sessionkey), pSKey));
  event endS().

(* Investigator, Judge, Court *)
let pICJ(sessionkey:sessionid, Spkey:publicKey, pIKey:secretKey) =
  let pkey = signedPublicKey(pIKey) in
  out(c, pkey);
  in(SI, m:bitstring);
  let (ct:bitstring, host: id, =sessionkey) = checksign(m, Spkey) in

  out(IT, (ct, host, sessionkey, m));
  out(IA, (ct, host, sessionkey));
  out(ID, sign((ct, host, sessionkey), pIKey));

  in(ID, (skeyi:ski, =sessionkey));

  event endICJ().

let decAuth(skey:skp, sessionkey:sessionid, Ipkey:publicKey, pDKey:secretKey)=
  let pkey = signedPublicKey(pDKey) in
  out(c, pkey);

  in(ID, m:bitstring);

  let (ct:bitstring, host:id, =sessionkey) = checksign(m, Ipkey) in
  (
    out(DT, (ct, host, sessionkey, m)) |
    out(DA, (ct, host, sessionkey))
  );

  in(DA, exists:bool);
  if exists then
    out(ID, (getSki(skey, host), sessionkey));
  event endDecAuth().

(* Auditor *)
let pA(sessionkey:sessionid, pAKey:secretKey)=
  let pkey = signedPublicKey(pAKey) in
  out(c, pkey);
  in(IA, (ct:bitstring, host:id, =sessionkey));
  in(DA, (ct':bitstring, host':id, =sessionkey));
  if (ct <> ct') && (host<> host') then
    out(DA, false)
  else
    out(DA, true);
  event auditorBullet((ct, host), (ct', host'));
  event endA().

  (* Tester *)
let pT(skey:skp, sessionkey:sessionid, psKey:publicKey, pAKey:publicKey, pIKey:publicKey, pDKey:publicKey) =
  in(ST, (ctS:bitstring, hostS:id, =sessionkey));
  in(IT, (ctI:bitstring, hostI:id, =sessionkey, mS:bitstring));
  in(DT, (ctD:bitstring, hostD:id, =sessionkey, mI:bitstring));

  let dataS:bitstring = decIBE(ctS, getSki(skey, hostS)) in
  let dataI:bitstring = decIBE(ctI, getSki(skey, hostI)) in
  let dataD:bitstring = decIBE(ctD, getSki(skey, hostD)) in

  let (ct_signedS:bitstring, host_signedS: id, sessionkey:sessionid) = checksign(mS, psKey) in
  let (ct_signedI:bitstring, host_signedI: id, sessionkey:sessionid) = checksign(mI, pIKey) in

  (* if(ctS<>ct_signedS) || (host_signedS<>hostS) then
    event BlameA(dataS, hostS, decIBE(ct_signedS, getSki(skey, hostS)), host_signedS) ; event NoBlameB(dataS, hostS) ; event NoBlameC(dataD, hostD)
  else
    event NoBlameA(dataS, hostS); *)

  if(ctI<>ct_signedI) || (host_signedI<>hostI) then
    event BlameB(dataI, hostI, decIBE(ct_signedI, getSki(skey, hostI)), host_signedI) ; event NoBlameA(dataS, hostS) ; event NoBlameC(dataD, hostD).

  (* if a = b
  if (dataS = dataI && hostS = hostI) then
    if (dataI = dataD && hostI = hostD) then event OKt(dataS, hostS, dataI, hostI, dataD, hostD)
    else event BlameC(dataS,hostS, dataD, hostD) ; event NoBlameA(dataS, hostS) ; event NoBlameB(dataI, hostI)
  else
    if (dataI = dataD && hostI = hostD) then event BlameB(dataI,hostI, dataS, hostS) ; event NoBlameA(dataS, hostS) ; event NoBlameC(dataD, hostD) (*  S != I, I == D  *)
    (*else *)
      (* if (data = dataD && host = hostD) then (* S == D, S != I *) (*)
        event BlameB(data, host, dataI, hostI) ; event NoBlameA(data, host) ; event NoBlameC(dataD, hostD)
      else *)
      (*event KOt(dataS, hostS, dataI, hostI, dataD, hostD).*)

(* Tester *)
let py(skey:skp, sessionkey:sessionid) =
  in(ST, (ct:bitstring, host:id, =sessionkey));
  0.

process
	! (new skey:skp ;
     new psKey:secretKey; new pAKey:secretKey; new pIKey:secretKey; new pDKey:secretKey;
     new data:bitstring;
     new host:id;
     new sessionkey:sessionid;
    (
  	   out(c, pk(skey)) |
       pS(pk(skey),sessionkey,data, host, psKey) |
       pA(sessionkey, pAKey) |
       decAuth(skey, sessionkey, signedPublicKey(pIKey), pDKey) |
       pICJ(sessionkey, signedPublicKey(psKey), pIKey) |
       pT(skey, sessionkey, signedPublicKey(psKey), signedPublicKey(pAKey), signedPublicKey(pIKey), signedPublicKey(pDKey))
  	)
  )
